import cv2
import numpy as np
import face_recognition
import os

path = 'attendence'
images = []
classnames = []
mylist = os.listdir(path)
print(mylist)
for cl in mylist:
    curimg=cv2.imread(f'{path}/{cl}')
    images.append(curimg)
    classnames.append(os.path.splitext(cl)[0])
print(classnames)

def findencodings(images):
    encodelist = []
    for img in images:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        encode = face_recognition.face_encodings(img)[0]
        encodelist.append(encode)
    return encodelist

encodelistknown = findencodings(images)
print(len(encodelistknown))
print('encoding complete')

cap = cv2.VideoCapture(0)

while True:
    sucess,img = cap.read()
    imgs = cv2.resize(img,(0,0),None,0.25,0.25)
    imgs = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    facescurframe = face_recognition.face_locations(imgs)
    encode = face_recognition.face_encodings(imgs,facescurframe)

    for encodeface,faceloc in zip(encode,facescurframe):
        matches = face_recognition.compare_faces(encodelistknown,encodeface)
        facedis = face_recognition.face_distance(encodelistknown,encodeface)
        print(facedis)
        matchindex =  np.argmin(facedis)


        if matches[matchindex]:
            name = classnames[matchindex].upper()
            print(name)
            y1,x2,y2,x1 = faceloc
            y1, x2, y2, x1 = y1*4,x2*4,y2*4,x1*4
            cv2.rectangle(img,(x1,y1),(x2,y2),(0,255,0),2)
            cv2.rectangle(img,(x1,y2-35),(x2,y2),(0,255,0),cv2.FILLED)
            cv2.putText(img,name,(x1+6,y2-6),cv2.FONT_HERSHEY_COMPLEX,1,(255,255,255),2)

    cv2.imshow('webcam',img)
    cv2.waitKey(1)
            

# faceloc = face_recognition.face_locations(image1)[0]
# encodeElon = face_recognition.face_encodings(image1)[0]
# cv2.rectangle(image1,(faceloc[3],faceloc[0]),(faceloc[1],faceloc[2]),(255,0,255),2)

# # faceloc locates he face 
# #encodePQR it converts the image data into computer level data
# #cv2.rectangle is used for drawing a rectangle over the face in the image    
# faceloc = face_recognition.face_locations(image2)[0]
# encodelon2 = face_recognition.face_encodings(image2)[0]
# cv2.rectangle(image2,(faceloc[3],faceloc[0]),(faceloc[1],faceloc[2]),(255,0,255),2)

# #results compares the images
# # prints in boolean if the image date compared is true 
# results = face_recognition.compare_faces([encodeElon],encodelon2)
# print(results)
